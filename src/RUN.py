#!/usr/bin/env python3

# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
import tkinter as tk
import chatbot, inout
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk
from login import log


KEY_PATH="./src/"

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets/frame0")

START, SPEAKING=False, False

def relative_to_assets(path: str) -> Path:
	return ASSETS_PATH / Path(path)


window = Tk()

gpt,API="",""

language_dict = {'en': 'English','es': 'Spanish','fr': 'French','de': 'German','it': 'Italian','pt': 'Portuguese','zh-CN': 'Chinese','zh-TW': 'Chinese','ja': 'Japanese','ko': 'Korean','ar': 'Arabic','ru': 'Russian','nl': 'Dutch'}



def translator(question, human_lang, GPT_lang):
	if (human_lang!=GPT_lang):
		question = "Answer to me in " +language_dict[GPT_lang]+ ". " +question	
		
	return question
				


def login(user, pwd, API):
	global START
	
	START=True
	
	if API!="":
		f = open(KEY_PATH+"Key.txt","w")
		f.write(API)
		f.close()
		gpt = chatbot.ChatGPT(API)
		START = gpt.verify()
	
	else:
		START = log(user, pwd)
		gpt = chatbot.ChatGPT(" ")
	
	try: entry_2.delete('0', "end")
	except: pass
	
	if START: entry_2.insert("end", "Login successfully")
			
	else:
		if(API!=""): entry_2.insert("end", "Invalid API Key")
		else:        entry_2.insert("end", "Signup is temporarily unavailable")

	
	if START: return gpt
	return -1


def chat(io, gpt):
	
	global entry_1, entry_2, entry_3, window, lyou, lGPT
	
	human_lang = lyou.get()
	GPT_lang = lGPT.get()
	
	io.update_lang(human_lang, GPT_lang)
	
	io.speech_to_text()

	question=translator(io.text, human_lang, GPT_lang)
	
	try: entry_1.delete('1.0', "end")
	except: pass
	
	
	if question!=-1 :
	
		entry_1.insert("end",io.text)	#Per evitare che venga scritto "risponidi in LIGNGUA"
		
		try: entry_2.delete("0", "end")
		except: pass
		
		entry_2.insert("end", "Please wait till the answer end.")
		window.update() 
	
		res = gpt.response(question)
		res = res[res.find(":")+1:].strip()
			 	
		try: entry_3.delete('1.0', "end")
		except: pass
		
		entry_3.insert("end", res)
		window.update() 
		io.text_to_speech(res) #for the answer
		
		entry_2.delete('0', "end")
		entry_2.insert("end", "Listening")
		window.update() 
	else: 
		try: entry_2.delete('0', "end")
		except: pass
		entry_2.insert("end", "Micrphone error - Listening")
		window.update() 
		
		

def start():

	global entry_API, entry_user, entry_pwd, entry_2, window, gpt
	
	# Leggi il contenuto delle TextBox
	user = entry_user.get()
	pwd = entry_pwd.get()
	API = entry_API.get()
	
	gpt = login(user, pwd, API)
	
	if gpt==-1: return
	
	#se il login va a buon fine parte l'ascolto
	if START:
		
		if entry_2.get(): entry_2.delete('0', "end")
		entry_2.insert("end", "Hello! Askme everything!")
		window.update() 
	else:
		if entry_2.get(): entry_2.delete('0', "end")
		entry_2.insert("end", "Login error")




#funzione per avviare conversazione e stopparla
def conversation():

	global  entry_2, gpt, window, SPEAKING
	
	print("Micr clicked")
	
	if START:
		SPEAKING=not(SPEAKING)
		io = inout.IO()
		
		if entry_2.get(): entry_2.delete('0', "end")
		
		if(SPEAKING): 
			#gpt = chatbot.ChatGPT(API) #per refreshare
			entry_2.insert("end", "Listening")
			
		else: entry_2.insert("end", "Stopped - Write something")
		window.update() 
		
		while SPEAKING:
			chat(io, gpt)
	
	else:
		if entry_2.get(): entry_2.delete('0', "end")
		entry_2.insert("end", "Sign-in first")




#funzione per inviare l'input da tastiera
def ask():

	global entry_1, entry_2, entry_3, window, lyou, lGPT, gpt
	
	
	if(START):
		
		TIMEOUT=False
		#gpt = chatbot.ChatGPT(API) #per refresh
		print("asked")
		
		human_lang = lyou.get()
		GPT_lang = lGPT.get()
		
		you_text = entry_1.get('1.0', "end")
		
		question=translator(you_text, human_lang, GPT_lang)

		try: entry_2.delete("0", "end")
		except: pass
		
		entry_2.insert("end", "Generating a response...")
		window.update() 
		
		try:
			res = gpt.response(question)
		except:
			TIMEOUT=True
		
		if not TIMEOUT:
			res = res[res.find(":")+1:].strip()
				 	
			try: entry_3.delete('1.0', "end")
			except: pass
			
			entry_3.insert("end", res)

			entry_2.delete('0', "end")
			entry_2.insert("end", "Waiting")
			try: entry_1.delete('1.0', "end")
			except: pass
			
		else:
			try: entry_3.delete('1.0', "end")
			except: pass
			
			entry_3.insert("end", "(⊙_◎)")
			entry_2.delete('0', "end")
			entry_2.insert("end", "Timeout Error")
			try: entry_1.delete('1.0', "end")
			except: pass
		window.update() 
	else:
		if entry_2.get(): entry_2.delete('0', "end")
		entry_2.insert("end", "Sign-in first")


	

window.geometry("1280x720")
window.configure(bg = "#277DFF")


canvas = Canvas(
    window,
    bg = "#277DFF",
    height = 720,
    width = 1280,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    690.0,
    0.0,
    1280.0,
    720.0,
    fill="#FFFFFF",
    outline="")

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    983.0,
    141.0,
    image=entry_image_1
)
#You text
entry_1 = Text(
    bd=0,
    bg="#EAF2FF",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=745.0,
    y=73.0 +25,
    width=476.0,
    height=134.0 -25
)
#Status
entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    1014.5,
    274.5,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#EAF2FF",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=905.0,
    y=249.0,
    width=219.0,
    height=49.0
)

#GPT text
entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    983.0,
    509.5,
    image=entry_image_3
)
entry_3 = Text(
    bd=0,
    bg="#EAF2FF",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=745.0,
    y=340.0 +30,
    width=476.0,
    height=337.0 -30
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    331.0,
    326.5,
    image=entry_image_4
)
entry_user = Entry(
    bd=0,
    bg="#EAF2FF",
    fg="#000716",
    highlightthickness=0
)
entry_user.place(
    x=93.0,
    y=301.0+25,
    width=476.0,
    height=49.0-25
)

canvas.create_text(
    754.0,
    352.0,
    anchor="nw",
    text="ChatGPT - ",
    fill="#0065FF",
    font=("Inter Bold", 20 * -1)
)

canvas.create_text(
    754.0,
    80.0,
    anchor="nw",
    text="You - ",
    fill="#0065FF",
    font=("Inter Bold", 20 * -1)
)

canvas.create_text(
    97.0,
    53.0,
    anchor="nw",
    text="ChatGPT conversational project",
    fill="#FFFFFF",
    font=("Inter Bold", 32 * -1)
)

canvas.create_text(
    107.0,
    173.0,
    anchor="nw",
    text="A simple project that lets you chat with your best ",
    fill="#FFFFFF",
    font=("Inter Bold", 20 * -1)
)

canvas.create_text(
    261.0,
    209.0,
    anchor="nw",
    text="assistant ever",
    fill="#FFFFFF",
    font=("Inter Bold", 20 * -1)
)

canvas.create_rectangle(
    216.0,
    129.0,
    476.0,
    134.0,
    fill="#9E00FF",
    outline="")

canvas.create_rectangle(
    201.0,
    461.0,
    311.0,
    466.0,
    fill="#9E00FF",
    outline="")

canvas.create_rectangle(
    355.0,
    461.0,
    465.0,
    466.0,
    fill="#9E00FF",
    outline="")

#SUBMIT
button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=start,
    relief="flat"
)
button_1.place(
    x=201.0,
    y=594.0,
    width=260.0,
    height=35.0
)

#VOICE
button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=conversation,
    relief="flat"
)
button_2.place(
    x=1155.0,
    y=249.0,
    width=51.0,
    height=51.0
)


#ASK
button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=ask,
    relief="flat"
)
button_3.place(
    x=757.0,
    y=240.0,
    width=70.0,
    height=70.0
)

canvas.create_rectangle(
    845.0,
    272.0,
    875.0,
    278.0,
    fill="#277DFF",
    outline="")

canvas.create_text(
    21.0,
    672.0,
    anchor="nw",
    text="By Marco Sento",
    fill="#FFFFFF",
    font=("Inter Light", 20 * -1)
)

canvas.create_text(
    94.0,
    302.0,
    anchor="nw",
    text="Username",
    fill="#0065FF",
    font=("Inter Bold", 20 * -1)
)

canvas.create_text(
    321.0,
    452.0,
    anchor="nw",
    text="Or",
    fill="#FFFFFF",
    font=("Inter Bold", 20 * -1)
)

entry_image_5 = PhotoImage(
    file=relative_to_assets("entry_5.png"))
entry_bg_5 = canvas.create_image(
    331.0,
    406.5,
    image=entry_image_5
)
entry_pwd = Entry(
    bd=0,
    bg="#EAF2FF",
    fg="#000716",
    highlightthickness=0
)
entry_pwd.place(
    x=93.0,
    y=381.0 +25,
    width=476.0,
    height=49.0 -25
)

canvas.create_text(
    94.0,
    381.0,
    anchor="nw",
    text="Password",
    fill="#0065FF",
    font=("Inter Bold", 20 * -1)
)

entry_image_6 = PhotoImage(
    file=relative_to_assets("entry_6.png"))
entry_bg_6 = canvas.create_image(
    331.0,
    527.5,
    image=entry_image_6
)
entry_API = Entry(
    bd=0,
    bg="#EAF2FF",
    fg="#000716",
    highlightthickness=0
)
entry_API.place(
    x=93.0,
    y=502.0+25,
    width=476.0,
    height=49.0-25
)

canvas.create_text(
    94.0,
    503.0,
    anchor="nw",
    text="OpenAI API key",
    fill="#0065FF",
    font=("Inter Bold", 20 * -1)
)


style= ttk.Style()
#style.theme_use('clam')
style.configure("TCombobox", fieldbackground= "#EAF2FF", background= "#EAF2FF", relief="flat", foreground="blue")

var1 = tk.StringVar()
var2 = tk.StringVar()
lyou = ttk.Combobox(window, width = 15, textvariable = var1)						
lGPT = ttk.Combobox(window, width = 15, textvariable = var2)
  
# Adding combobox drop down list
lyou['values'] = ('en', 'es', 'fr', 'de', 'it', 'pt', 'nl', 'ru', 'zh-CN', 'zh-TW', 'ja', 'ko', 'ar')
lGPT['values']= ('en', 'es', 'fr', 'de', 'it', 'pt', 'nl', 'ru', 'zh-CN', 'zh-TW', 'ja', 'ko', 'ar')

lyou.place(x=745.0 +68,
	y=73.0 +7,
	width=60.0,
	height=18.0)

lGPT.place(x=745.0 +108,
	 y=340.0 +12,
	width=60.0,
	height=18.0)

lyou.set("en")
lGPT.set("en")

entry_2.insert("end", "Hello, insert your API Key")

try:
    f = open(KEY_PATH+"Key.txt","r")
    API = f.readline()
    #API = API[:-1]
    entry_API.insert("end",API)
    f.close()
except:
    pass


window.resizable(False, False)
window.mainloop()
